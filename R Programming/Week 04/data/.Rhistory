library (datasets)
iris
iris[,101:150]
iris[101:150,]
colMeans(iris[101:150,])
colMeans(iris[101:150,1:4])
apply(iris[, 1:4], 2, mean)
colMeans(iris[,1:4])
apply(iris[, 1:4], 1, mean)
rowMeans(iris[, 1:4])
apply(iris, 1, mean)
apply(iris, 2, mean)
mtcars
lapply(mtcars, mean)
sapply(mtcars, cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
split(mtcars, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
apply(mtcars, 2, mean)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$hp, mtcars$cyl, mean)
209.21429-82.63636
debug(ls)
ls
solve?
asf
list(a=1:5, b=rnorm(10))
set.seed(1)
rpois(5,2)
set.seed(10)
x <- rep(0:1, each = 5)
x
e <- rnorm(10, 0, 20)
e
y <- 0.5 + 2 * x + e
y
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
outcome <- read.csv("data/outcome-of-care-measures.csv", colClasses = "character")
setwd("D:/University/Coursera/Data Science Specialization/R Programming/Week 04/data")
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
outcome[, 11] <- as.numeric(outcome[, 11])
outcome[, 17] <- as.numeric(outcome[, 17])
outcome[, 23] <- as.numeric(outcome[, 23])
names(outcome)
mylist <- split(outcome, df$State)
mylist <- split(outcome, outcome$State)
mylist
state<- MA
state<- "MA"
mylist$state
asdf<-"MA"
mylist$asdf
mylist
mylist[17, ]
mylist[, 17]
mylist[, 17:17]
mylist[17:18, ]
y<- mylist$MA
y
y[,17]
names(y[,17])
mylist.asdf
mylist[asdf]
mylist[asdf][,17]
nrow(mylist[asdf])
mylist[[asdf]
]
nrow(mylist[[asdf]])
mylist[[asdf]][,17]
dfsds<-mylist[[asdf]][,17]
min(dfsds)
min(dfsds, na.rm = TRUE)
best<- function(state, outcomeType){
outcome <- read.csv("data/outcome-of-care-measures.csv", colClasses = "character")
stateList<- levels(as.factor(outcome[,7]))
if(!state %in% stateList){
stop("invalid state")
}
types<-c("heart attack", "heart failure", "pneumonia")
if(!outcomeType %in% types){
stop("invalid outcome")
}
outcome[, 11] <- as.numeric(outcome[, 11])
outcome[, 17] <- as.numeric(outcome[, 17])
outcome[, 23] <- as.numeric(outcome[, 23])
if(outcomeType=="heart attack") val<-11
if(outcomeType=="heart failure") val<-17
if(outcomeType=="pneumonia") val<-23
temp <- split(outcome, outcome$State)
valuese<- temp[[asdf]][,val]
min(valuese, na.rm = TRUE)
}
best("TX", "heart attack")
best<- function(state, outcomeType){
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
stateList<- levels(as.factor(outcome[,7]))
if(!state %in% stateList){
stop("invalid state")
}
types<-c("heart attack", "heart failure", "pneumonia")
if(!outcomeType %in% types){
stop("invalid outcome")
}
outcome[, 11] <- as.numeric(outcome[, 11])
outcome[, 17] <- as.numeric(outcome[, 17])
outcome[, 23] <- as.numeric(outcome[, 23])
if(outcomeType=="heart attack") val<-11
if(outcomeType=="heart failure") val<-17
if(outcomeType=="pneumonia") val<-23
temp <- split(outcome, outcome$State)
valuese<- temp[[asdf]][,val]
min(valuese, na.rm = TRUE)
}
best("TX", "heart attack")
names(outcome)
best<- function(state, outcomeType){
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
stateList<- levels(as.factor(outcome[,7]))
if(!state %in% stateList){
stop("invalid state")
}
types<-c("heart attack", "heart failure", "pneumonia")
if(!outcomeType %in% types){
stop("invalid outcome")
}
outcome[, 11] <- as.numeric(outcome[, 11])
outcome[, 17] <- as.numeric(outcome[, 17])
outcome[, 23] <- as.numeric(outcome[, 23])
if(outcomeType=="heart attack") val<-11
if(outcomeType=="heart failure") val<-17
if(outcomeType=="pneumonia") val<-23
temp <- split(outcome, outcome$State)
valuese<- temp[[asdf]][,val]
which.min(valuese, na.rm = TRUE)
}
best("TX", "heart attack")
best<- function(state, outcomeType){
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
stateList<- levels(as.factor(outcome[,7]))
if(!state %in% stateList){
stop("invalid state")
}
types<-c("heart attack", "heart failure", "pneumonia")
if(!outcomeType %in% types){
stop("invalid outcome")
}
outcome[, 11] <- as.numeric(outcome[, 11])
outcome[, 17] <- as.numeric(outcome[, 17])
outcome[, 23] <- as.numeric(outcome[, 23])
if(outcomeType=="heart attack") val<-11
if(outcomeType=="heart failure") val<-17
if(outcomeType=="pneumonia") val<-23
temp <- split(outcome, outcome$State)
valuese<- temp[[asdf]][,val]
which.min(valuese)
}
best("TX", "heart attack")
best<- function(state, outcomeType){
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
stateList<- levels(as.factor(outcome[,7]))
if(!state %in% stateList){
stop("invalid state")
}
types<-c("heart attack", "heart failure", "pneumonia")
if(!outcomeType %in% types){
stop("invalid outcome")
}
outcome[, 11] <- as.numeric(outcome[, 11])
outcome[, 17] <- as.numeric(outcome[, 17])
outcome[, 23] <- as.numeric(outcome[, 23])
if(outcomeType=="heart attack") val<-11
if(outcomeType=="heart failure") val<-17
if(outcomeType=="pneumonia") val<-23
temp <- split(outcome, outcome$State)
print(temp)
valuese<- temp[[asdf]][,val]
which.min(valuese)
}
best("TX", "heart attack")
best<- function(state, outcomeType){
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
stateList<- levels(as.factor(outcome[,7]))
if(!state %in% stateList){
stop("invalid state")
}
types<-c("heart attack", "heart failure", "pneumonia")
if(!outcomeType %in% types){
stop("invalid outcome")
}
outcome[, 11] <- as.numeric(outcome[, 11])
outcome[, 17] <- as.numeric(outcome[, 17])
outcome[, 23] <- as.numeric(outcome[, 23])
if(outcomeType=="heart attack") val<-11
if(outcomeType=="heart failure") val<-17
if(outcomeType=="pneumonia") val<-23
temp <- split(outcome, outcome$State)
print(temp)
valuese<- temp[[asdf]][,val]
print(valuese)
which.min(valuese)
}
best("TX", "heart attack")
best<- function(state, outcomeType){
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
stateList<- levels(as.factor(outcome[,7]))
if(!state %in% stateList){
stop("invalid state")
}
types<-c("heart attack", "heart failure", "pneumonia")
if(!outcomeType %in% types){
stop("invalid outcome")
}
outcome[, 11] <- as.numeric(outcome[, 11])
outcome[, 17] <- as.numeric(outcome[, 17])
outcome[, 23] <- as.numeric(outcome[, 23])
if(outcomeType=="heart attack") val<-11
if(outcomeType=="heart failure") val<-17
if(outcomeType=="pneumonia") val<-23
temp <- split(outcome, outcome$State)
print(temp)
valuese<- temp[[asdf]][,val]
print(temp[[asdf]])
print(valuese)
which.min(valuese)
}
best<- function(state, outcomeType){
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
stateList<- levels(as.factor(outcome[,7]))
if(!state %in% stateList){
stop("invalid state")
}
types<-c("heart attack", "heart failure", "pneumonia")
if(!outcomeType %in% types){
stop("invalid outcome")
}
outcome[, 11] <- as.numeric(outcome[, 11])
outcome[, 17] <- as.numeric(outcome[, 17])
outcome[, 23] <- as.numeric(outcome[, 23])
if(outcomeType=="heart attack") val<-11
if(outcomeType=="heart failure") val<-17
if(outcomeType=="pneumonia") val<-23
temp <- split(outcome, outcome$State)
print(temp)
valuese<- temp[[asdf]][,val]
print(temp[[asdf]])
print(valuese)
which.min(valuese)
}
best("TX", "heart attack")
best<- function(state, outcomeType){
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
stateList<- levels(as.factor(outcome[,7]))
if(!state %in% stateList){
stop("invalid state")
}
types<-c("heart attack", "heart failure", "pneumonia")
if(!outcomeType %in% types){
stop("invalid outcome")
}
outcome[, 11] <- as.numeric(outcome[, 11])
outcome[, 17] <- as.numeric(outcome[, 17])
outcome[, 23] <- as.numeric(outcome[, 23])
if(outcomeType=="heart attack") val<-11
if(outcomeType=="heart failure") val<-17
if(outcomeType=="pneumonia") val<-23
temp <- split(outcome, outcome$State)
print(temp)
#valuese<- temp[[asdf]][,val]
#print(valuese)
which.min(temp[[asdf]][,val])
}
best("TX", "heart attack")
best<- function(state, outcomeType){
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
stateList<- levels(as.factor(outcome[,7]))
if(!state %in% stateList){
stop("invalid state")
}
types<-c("heart attack", "heart failure", "pneumonia")
if(!outcomeType %in% types){
stop("invalid outcome")
}
outcome[, 11] <- as.numeric(outcome[, 11])
outcome[, 17] <- as.numeric(outcome[, 17])
outcome[, 23] <- as.numeric(outcome[, 23])
if(outcomeType=="heart attack") val<-11
if(outcomeType=="heart failure") val<-17
if(outcomeType=="pneumonia") val<-23
temp <- split(outcome, outcome$State)
print(temp)
valuese<- temp[[asdf]][,val]
#print(valuese)
which.min(temp[[asdf]]$State)
}
best("TX", "heart attack")
temp
mylisy
mylist
mylist[[asdf]]
mylist[[asdf]]$State
names(mylist[[asdf]])
mylist[[asdf]][,11]
mylist[[asdf]][,c(2,11)]
which.min(mylist[[asdf]][,c(2,11)])
which.min(mylist[[asdf]][,c(2,11)][,2])
ysf<-mylist[[asdf]][,c(2,11)]
which.min(ysf[,2])
ysf[42]
ysf[42,]
best<- function(state, outcomeType){
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
stateList<- levels(as.factor(outcome[,7]))
if(!state %in% stateList){
stop("invalid state")
}
types<-c("heart attack", "heart failure", "pneumonia")
if(!outcomeType %in% types){
stop("invalid outcome")
}
outcome[, 11] <- as.numeric(outcome[, 11])
outcome[, 17] <- as.numeric(outcome[, 17])
outcome[, 23] <- as.numeric(outcome[, 23])
if(outcomeType=="heart attack") val<-11
if(outcomeType=="heart failure") val<-17
if(outcomeType=="pneumonia") val<-23
temp <- split(outcome, outcome$State)
ysf<-temp[[state]][,c(2,val)]
#print(valuese)
ysf[which.min(ysf[,2]),]
#which.min(temp[[asdf]]$State)
}
best("TX", "heart attack")
best<- function(state, outcomeType){
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
stateList<- levels(as.factor(outcome[,7]))
if(!state %in% stateList){
stop("invalid state")
}
types<-c("heart attack", "heart failure", "pneumonia")
if(!outcomeType %in% types){
stop("invalid outcome")
}
outcome[, 11] <- as.numeric(outcome[, 11])
outcome[, 17] <- as.numeric(outcome[, 17])
outcome[, 23] <- as.numeric(outcome[, 23])
if(outcomeType=="heart attack") val<-11
if(outcomeType=="heart failure") val<-17
if(outcomeType=="pneumonia") val<-23
temp <- split(outcome, outcome$State)
ysf<-temp[[state]][,c(2,val)]
#print(valuese)
ysf[which.min(ysf[,2]),][,1]
#which.min(temp[[asdf]]$State)
}
best("TX", "heart attack")
best("TX", "heart failure")
best("MD", "heart attack")
best("MD", "pneumonia")
best("BB", "heart attack")
best("NY", "hert attack")
ysf<-mylist[[asdf]][,c(2,11)]
ysf
order(ysf, ysf[,2], ysf[,1])
order(ysf, ysf[,2])
order(ysf[,2])
order(ysf[,2], ysf[,1])
ysf[2]
ysf[,2]
best<- function(state, outcomeType){
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
stateList<- levels(as.factor(outcome[,7]))
if(!state %in% stateList){
stop("invalid state")
}
types<-c("heart attack", "heart failure", "pneumonia")
if(!outcomeType %in% types){
stop("invalid outcome")
}
outcome[, 11] <- as.numeric(outcome[, 11])
outcome[, 17] <- as.numeric(outcome[, 17])
outcome[, 23] <- as.numeric(outcome[, 23])
if(outcomeType=="heart attack") val<-11
if(outcomeType=="heart failure") val<-17
if(outcomeType=="pneumonia") val<-23
temp <- split(outcome, outcome$State)
ysf<-temp[[state]][,c(2,val)]
ysf<- order(ysf[,2],ysf[,1])
ysf[1,1]
#ysf[which.min(ysf[,2]),][,1]
#print(valuese)
#which.min(temp[[asdf]]$State)
}
best("TX", "heart attack")
best<- function(state, outcomeType){
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
stateList<- levels(as.factor(outcome[,7]))
if(!state %in% stateList){
stop("invalid state")
}
types<-c("heart attack", "heart failure", "pneumonia")
if(!outcomeType %in% types){
stop("invalid outcome")
}
outcome[, 11] <- as.numeric(outcome[, 11])
outcome[, 17] <- as.numeric(outcome[, 17])
outcome[, 23] <- as.numeric(outcome[, 23])
if(outcomeType=="heart attack") val<-11
if(outcomeType=="heart failure") val<-17
if(outcomeType=="pneumonia") val<-23
temp <- split(outcome, outcome$State)
ysf<-temp[[state]][,c(2,val)]
ysf<- order(ysf[,2],ysf[,1])
ysf[1,]
#ysf[which.min(ysf[,2]),][,1]
#print(valuese)
#which.min(temp[[asdf]]$State)
}
best("TX", "heart attack")
best<- function(state, outcomeType){
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
stateList<- levels(as.factor(outcome[,7]))
if(!state %in% stateList){
stop("invalid state")
}
types<-c("heart attack", "heart failure", "pneumonia")
if(!outcomeType %in% types){
stop("invalid outcome")
}
outcome[, 11] <- as.numeric(outcome[, 11])
outcome[, 17] <- as.numeric(outcome[, 17])
outcome[, 23] <- as.numeric(outcome[, 23])
if(outcomeType=="heart attack") val<-11
if(outcomeType=="heart failure") val<-17
if(outcomeType=="pneumonia") val<-23
temp <- split(outcome, outcome$State)
ysf<-temp[[state]][,c(2,val)]
ysf<- order(ysf[,2],ysf[,1])
ysf
#ysf[which.min(ysf[,2]),][,1]
#print(valuese)
#which.min(temp[[asdf]]$State)
}
best("TX", "heart attack")
best<- function(state, outcomeType){
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
stateList<- levels(as.factor(outcome[,7]))
if(!state %in% stateList){
stop("invalid state")
}
types<-c("heart attack", "heart failure", "pneumonia")
if(!outcomeType %in% types){
stop("invalid outcome")
}
outcome[, 11] <- as.numeric(outcome[, 11])
outcome[, 17] <- as.numeric(outcome[, 17])
outcome[, 23] <- as.numeric(outcome[, 23])
if(outcomeType=="heart attack") val<-11
if(outcomeType=="heart failure") val<-17
if(outcomeType=="pneumonia") val<-23
temp <- split(outcome, outcome$State)
ysf<-temp[[state]][,c(2,val)]
new<- order(ysf[,2],ysf[,1])
ysf[new[1],]
#ysf[which.min(ysf[,2]),][,1]
#print(valuese)
#which.min(temp[[asdf]]$State)
}
best("TX", "heart attack")
best<- function(state, outcomeType){
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
stateList<- levels(as.factor(outcome[,7]))
if(!state %in% stateList){
stop("invalid state")
}
types<-c("heart attack", "heart failure", "pneumonia")
if(!outcomeType %in% types){
stop("invalid outcome")
}
outcome[, 11] <- as.numeric(outcome[, 11])
outcome[, 17] <- as.numeric(outcome[, 17])
outcome[, 23] <- as.numeric(outcome[, 23])
if(outcomeType=="heart attack") val<-11
if(outcomeType=="heart failure") val<-17
if(outcomeType=="pneumonia") val<-23
temp <- split(outcome, outcome$State)
ysf<-temp[[state]][,c(2,val)]
new<- order(ysf[,2],ysf[,1])
ysf[new[1],][,1]
#ysf[which.min(ysf[,2]),][,1]
#print(valuese)
#which.min(temp[[asdf]]$State)
}
best("TX", "heart attack")
best("MD", "heart attack")
